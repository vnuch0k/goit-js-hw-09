{"version":3,"sources":["js/03-promises.js"],"names":["refs","form","document","querySelector","delayInput","stepInput","amountInput","createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","onFormSumbit","e","preventDefault","step","amount","target","delayValue","Number","value","stepValue","amountValue","i","then","console","log","catch","addEventListener"],"mappings":";AAAA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBAKtC,SAASI,EAAcC,EAAUC,GACxB,OAAA,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEH,SAAAA,EAAUC,MAAAA,IAGpBG,EAAO,CAAEJ,SAAAA,EAAUC,MAAAA,KAEpBA,KAMP,SAASO,EAAaC,GACpBA,EAAEC,iBACI,MAAA,MAAET,EAAF,KAASU,EAAT,OAAeC,GAAWH,EAAEI,OAC9BC,IAAAA,EAAaC,OAAOd,EAAMe,OACxBC,MAAAA,EAAYF,OAAOJ,EAAKK,OACxBE,EAAcH,OAAOH,EAAOI,OAG7B,IAAA,IAAIG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EACrCpB,EAAcoB,EAAGL,GACdM,KAAK,EAAGpB,SAAAA,EAAUC,MAAAA,MACnBoB,QAAQC,2BAA2BtB,QAAeC,SAElDsB,MAAM,EAAGvB,SAAAA,EAAUC,MAAAA,MACnBoB,QAAQC,0BAA0BtB,QAAeC,SAEnDa,GAAcG,EAlBlBzB,EAAKC,KAAK+B,iBAAiB,SAAUhB","file":"03-promises.8d85fdb2.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('input[name = delay]'),\n  stepInput: document.querySelector('input[name = step]'),\n  amountInput: document.querySelector('input[name = amount]')\n}\n\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nrefs.form.addEventListener('submit', onFormSumbit);\n\nfunction onFormSumbit(e) {\n  e.preventDefault();\n  const { delay, step, amount } = e.target;\n  let delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n\n  for (let i = 1; i <= amountValue; i += 1) {\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      }).\n      catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      })\n    delayValue += stepValue;\n  }\n}\n\n"]}